;---------------------
; Title: EE310 Assignment 6B
;---------------------
; Program Details:
; The purpose of this program is to take button inputs to count up, down, or reset on 
; a seven segment display using the PIC Curiosity board based on user input
    
; Inputs: RB0-1
; Outputs: RD0-7
; Setup: The Curiosity Board (PIC18F47K42)

; Date: Mar 26, 2024
; File Dependencies: 6Bconfig.inc
; Compiler: XC8, 2.4
; Author: Antonino Balistreri
; Versions:
;       V1.0: Original code, worked on it till functioning properly
;
;------------------
; Initialization
;------------------
#include "/Users/ninobal04/MPLABXProjects/EE310_Assignment_6B.X/6Bconfig.inc"
#include <xc.inc>
       
 
    ORG	    0
    GOTO    begin
    ORG	    0x20

;------------------------
; Delay loop parameters
;------------------------

INNER	EQU	255
OUTER	EQU	3

;------------------------
; Main Program
;------------------------
	
PSECT absdata,abs,ovrld 
	
begin:
    CALL    pointset
    CALL    portdset	    ;Calls function to setup PORTD (RCALL = less memory)
    CALL    portbset	    ;Calls function to setup PORTD (RCALL = less memory)
    CALL    resetdisplay
    CALL    setregs	    ;Puts the HEX code in registers to be calles uding pointers for display
    NOP
    
loop:			    ;Main loop of the program
    CALL    pointreset	    ;Calls function to reset pointers
    CALL    compare	    ;Calls function to compare button pushes
    GOTO    loop	    

pointset:		    ;Setting pointers
    LFSR    0, 0x20	    ;increment
    LFSR    1, 0x2F	    ;decrement
    RETURN

portbset:		    ;Setting input
    BANKSEL PORTB
    CLRF    PORTB
    BANKSEL LATB
    CLRF    LATB
    BANKSEL ANSELB
    CLRF    ANSELB
    BANKSEL TRISB
    MOVLW   0b00000011	    ;Setting last two pins as input
    MOVWF   TRISB	    
    RETURN

portdset:		    ;Setting output
    BANKSEL PORTD
    CLRF    PORTD
    BANKSEL LATD
    CLRF    LATD
    BANKSEL ANSELD
    CLRF    ANSELD
    BANKSEL TRISD
    MOVLW   0b00000000	    ;Setting PORTD as an output
    MOVWF   TRISD	    
    RETURN

pointreset:		    ;Resets pointers
    MOVLW   0xFF	    ;Moves FF into W
    CPFSEQ  INDF0	    ;Compares W with the current pointer (0) location
    GOTO    nxt1	    ;Not true = jumo to next pointer compare
    LFSR    0, 0x20	    ;True = Load FSR for 0 (incrementing)
    nxt1:
	MOVLW	0xFF	    
	CPFSEQ	INDF1	    ;Compares W with the current pointer (1) location
	GOTO	nxt2	    ;Not true = return
	LFSR	1, 0x2F	    ;True = Load FSR for F (decrementing)
    nxt2:
	RETURN	    

delay:				;Delay Function
    MOVLW   INNER		
    MOVWF   0x10		;Moves 255 into 3 seperate registers
    MOVWF   0x11
    MOVWF   0x14
    MOVLW   OUTER		
    MOVWF   0x12		;Moves 3 into Register 12
    delayloop:
	    DECF    0x10	;Decrements 255
	    BNZ	    delayloop	;Loops until zero
	MOVFF	0x14,0x10	;Resets register 10
	DECF	0x11		;Decrements 255
	BNZ	delayloop	;Loops until zero
    MOVFF   0x14,0x11		;Resets register 11
    DECF    0x12		;Decrements 3
    BNZ	    delayloop		;Loops until zero
RETURN
    
resetdisplay:
    MOVFF   0x20, PORTD
    RETURN

setregs:		    ;Puts all displayable values in hex into registers
    MOVLW   0x3F	    ;0
    MOVWF   POSTINC0,0
    MOVLW   0x06	    ;1
    MOVWF   POSTINC0,0
    MOVLW   0x5B	    ;2
    MOVWF   POSTINC0,0
    MOVLW   0x4F	    ;3
    MOVWF   POSTINC0,0
    MOVLW   0x66	    ;4
    MOVWF   POSTINC0,0
    MOVLW   0x6D	    ;5
    MOVWF   POSTINC0,0
    MOVLW   0x7D	    ;6
    MOVWF   POSTINC0,0
    MOVLW   0x07	    ;7
    MOVWF   POSTINC0,0
    MOVLW   0x7F	    ;8
    MOVWF   POSTINC0,0
    MOVLW   0x67	    ;9
    MOVWF   POSTINC0,0
    MOVLW   0x77	    ;A
    MOVWF   POSTINC0,0
    MOVLW   0x7C	    ;B (lowercase to show difference from 8)
    MOVWF   POSTINC0,0
    MOVLW   0x39	    ;C
    MOVWF   POSTINC0,0
    MOVLW   0x5E	    ;D (lowercase to show difference from 0)
    MOVWF   POSTINC0,0
    MOVLW   0x79	    ;E
    MOVWF   POSTINC0,0
    MOVLW   0x71	    ;F
    MOVWF   POSTINC0,0
    
    LFSR    0, 0x20	    ;Loads FSR 0
    MOVLW   0xFF	    ;Moves FF into W
    MOVWF   0x30	    ;Moves FF into register 30
    MOVLW   0xFF	    ;moves FF back to W
    MOVWF   0x1F	    ;Moves FF into register 1F
    RETURN

    compare:
		MOVLW   1	    ;First compare value
		CPFSEQ  PORTB	    ;If button reads true with W
		GOTO    compare2    ;not true = Moves onto next compare value
		CALL    INCREMENT   ;true = jump to increment
		GOTO    fin	    
    compare2:	MOVLW	2	    ;Second compare value
		CPFSEQ	PORTB	    ;If button reads true with W
		GOTO	compare3    ;Not true = move to last compare value
		CALL	DECREMENT   ;True = jump to decrement
		GOTO	fin
    compare3:	MOVLW	3	    ;Third compare value
		CPFSEQ	PORTB	    ;If button reads true with W
		GOTO	fin	    ;Not true = return
		CALL	resetdisp   ;True = call reset display
    fin:
RETURN

INCREMENT:		    ;Function to increment the HEX values
    LFSR    1, 0x2F	    ;Loads FSR pointer for incrementing (0)
    MOVLW   0
    CPFSEQ  PORTB	    ;Compared to see if button not pressed
    GOTO    incnotzero	    ;Not true = move to increment statement
    CALL    iszero	    ;True = moves to reset pointer
    RETURN
    incnotzero:
	MOVFF	POSTINC0, PORTD	    ;Moves value from pointer into PORTD then increments
	CALL	delay		    ;Calls delay function
RETURN

DECREMENT:		    ;Function to decrement the HEX values
    LFSR    0, 0x20	    ;Loads FSR pointer for decrementing (1)
    MOVLW   0
    CPFSEQ  PORTB	    ;Checks iif button not pressed
    GOTO    decnotzero	    ;Not true = move to decrement statement
    CALL    iszero	    ;True = move to reset pointer
    RETURN
    decnotzero:
	CALL delay		    ;Call delay function
	MOVFF	POSTDEC1, PORTD	    ;Moves value from pointer into PORTD then decrements
RETURN	
    
iszero:
    MOVFF   INDF0, PORTD    ;Takes pointer value (0) and moves to PORTD
    MOVFF   INDF1, PORTD    ;Takes pointer value (F) and moves to PORTD	    
RETURN
    
resetdisp:		    ;Funtion that resets display
    LFSR    0, 0x20	    ;Load FSR for 0
    LFSR    0, 0x2F	    ;Load FSR for F
    MOVFF   0x20, PORTD	    ;Move 0 into PORTD
    CALL    delay	    ;Call delay function
    RETURN
END
